{
  repository: {
    'tag-events-attribute': {
      captures: {
        '1': {
          // using another scope different from the one it fits to differentiate in color from objects and variables
          name: 'support.type.object.module.html' 
        },
        '2': {
          name: 'constant.character.entity.html'
        }
      },
      begin: '(DOMMenuItemActive|DOMMenuItemInactive|DOMMouseScroll|onabort|onafterprint|onafterupdate|onbeforecopy|onbeforecut|onbeforeeditfocus|onbeforepaste|onbeforeprint|onbeforeunload|onbeforeupdate|onblur|onbounce|onbroadcast|oncanplay|oncanplaythrough|oncellchange|onchange|onclick|onclose|oncommand|oncommandupdate|oncontextmenu|oncopy|oncut|ondataavailable|ondatasetchanged|ondatasetcomplete|ondblclick|ondrag|ondragdrop|ondragend|ondragenter|ondragexit|ondraggesture|ondragleave|ondragover|ondragstart|ondrop|ondurationchange|onemptied|onended|onerror|onerrorupdate|onfilterchange|onfinish|onfocus|onformchange|onforminput|ongotpointercapture|onhelp|oninput|oninvalid|onkeydown|onkeypress|onkeyup|onload|onloadeddata|onloadedmetadata|onloadstart|onlosecapture|onlostpointercapture|onmousedown|onmousemove|onmouseout|onmouseover|onmouseup|onmousewheel|onoverflow|onoverflowchanged|onpaste|onpause|onplay|onplaying|onpointercancel|onpointerdown|onpointerenter|onpointerleave|onpointermove|onpointerout|onpointerover|onpointerup|onpopuphidden|onpopuphiding|onpopupshowing|onpopupshown|onprogress|onpropertychange|onratechange|onreadystatechange|onreset|onresize|onrowenter|onrowexit|onrowinserted|onrowsdelete|onscroll|onseeked|onseeking|onselect|onselectstart|onshow|onstalled|onstart|onstop|onsubmit|onsuspend|ontimeupdate|onunderflow|onunload|onvolumechange|onwaiting|style)+(=)',
      end: '(?<=\'|")|(?=[\\s<>`])',
      name: 'meta.attribute-with-value.events.html',
      patterns: [
        {
          beginCaptures: {
            '0': { name: 'punctuation.definition.string.begin.html' }
          },
          patterns: [{ include: 'source.js#expression' }],
          begin: '"',
          endCaptures: {
            '0': { name: 'punctuation.definition.string.end.html' }
          },
          end: '"',
          name: 'source.events.html'
        },
        {
          beginCaptures: {
            '0': { name: 'punctuation.definition.string.begin.html' }
          },
          patterns: [{ include: 'source.js#expression' }],
          begin: "'",
          endCaptures: {
            '0': { name: 'punctuation.definition.string.end.html' }
          },
          end: "'",
          name: 'source.events.html'
        }
      ]
    }
  }
}
